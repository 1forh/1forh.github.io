{"05-02-2017-creating-a-blog-with-angularjs-and-markdown":{"date":"5 February 2017","title":"Creating a blog with AngularJS and Markdown","excerpt":"I use Angular a lot at work so to become even more familiar with it, I wanted to create my portfolio using Angular. I also wanted to be able to write my posts in markdown.","tags":["JavaScript","AngularJS","Gulp","Markdown"],"body":"<h2 id=\"the-problem\">The problem</h2>\n<p>I use <a href=\"https://angularjs.org/\">Angular</a> a decent amount at work. To become even more familiar with it, I wanted to create my portfolio/blog using Angular. I also wanted to be able to write my posts in markdown.</p>\n<p>How do I get Angular to read my posts in markdown?</p>\n<hr>\n<h2 id=\"the-solution\">The solution</h2>\n<p>I&#39;m going to use a Gulp task to convert the markdown to JSON. Angular can read JSON very easily.</p>\n<hr>\n<h2 id=\"setting-up-the-application\">Setting up the application</h2>\n<p>I want to be able to easily refactor this application to <a href=\"https://angular.io/\">Angular 2</a> when we start using it at work. I can setup my application using a &quot;Component Architecture&quot; so that it is relativey similar to how an Angular 2 application is setup. I will also heavily utilize Angular&#39;s <a href=\"https://docs.angularjs.org/guide/component\">component</a> directive for the same reason.</p>\n<h3 id=\"the-application-structure\">The application structure</h3>\n<p>Like I said above, my portfolio&#39;s directory structure will be set up using a &quot;<a href=\"https://docs.angularjs.org/guide/component\">Component Architecture</a>&quot;. Organizing my application utilizing the strengths of Angular&#39;s component directive will help me keep my portfolio maintainable and scalable. Here is an article explaining what an Angular component is and how to use it: <a href=\"https://scotch.io/tutorials/how-to-use-angular-1-5s-component-method\">https://scotch.io/tutorials/how-to-use-angular-1-5s-component-method</a></p>\n<p>I will keep all of my application specific code in the <code>app</code> directory and I will keep all of my blog posts in the <code>posts</code> directory. Remember, my Gulp task will take the markdown files from the <code>post</code> directory and output a JSON file. An Angular service will then call for the data using an <code>http</code> request. This will allow me to manipulate the data and pass it to the template through a controller.</p>\n<pre><code>src/\n  app/\n    components/\n      zm-blog/\n    app.routes.js\n    app.module.js\n  posts/\n    05-02-2017-test-post.md\n</code></pre><h3 id=\"the-gulp-task\">The Gulp task</h3>\n<p>I will use the <a href=\"https://github.com/sparkartgroup/gulp-markdown-to-json\">gulp-markdown-to-json</a> plugin to convert my markdown to JSON. </p>\n<pre><code class=\"lang-javascript\">import gulp from &#39;gulp&#39;;\nimport gutil from &#39;gulp-util&#39;;\nimport plumber from &#39;gulp-plumber&#39;;\nimport markdownToJson from &#39;gulp-markdown-to-json&#39;;\n\ngulp.task(&#39;posts&#39;, () =&gt; {\n  return gulp.src(&#39;./src/posts/**/*.md&#39;)\n    .pipe(plumber())\n    .pipe(gutil.buffer())\n    .pipe(markdownToJson(marked, &#39;posts.json&#39;))\n    .pipe(gulp.dest(&#39;./dist/data&#39;));\n});\n</code></pre>\n<p>This Gulp task takes in all of my blog posts, written in markdown, and outputs the data to one JSON file: <code>posts.json</code>.</p>\n<p>Then I can get the data from <code>posts.json</code> using an Angular service.</p>\n<h3 id=\"an-example-post\">An example post</h3>\n<p>The Gulp task will take the Front Matter block and output the data, along with the compiled markup of my post, as JSON. I can put any type of data I want here and the Gulp task will convert it to JSON. This will allow me to manipulate the data and use it in my Angular components.</p>\n<pre><code class=\"lang-markdown\">---\ntitle: Example Post\nexcerpt: Using Angularjs to create a blog/portfolio lorem...\ntags:\n - Tag 1\n - Tag 2\n\n---\n\n## Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam in repellat suscipit maiores possimus aliquam hic distinctio, quas commodi, eaque tempora iusto ratione, nostrum adipisci quidem quasi! Numquam tempore, itaque.\n\n- Lorem Ipsum\n- Lorem Ipsum\n- Lorem Ipsum\n</code></pre>\n<h3 id=\"the-blog-angular-component\">The blog Angular component</h3>\n<p>It&#39;s good practice to namespace a custom angular component. This allows relative certainty that none of the custom code will effect dependency/vendor code and vice/versa. </p>\n<p>I&#39;m just going to use my initials. This makes it: <code>zm-blog</code>.</p>\n<h4 id=\"zm-blog-component-js\">zm-blog.component.js</h4>\n<p>Setup the Angular component</p>\n<pre><code class=\"lang-javascript\">const zmBlog = {\n  templateUrl: &#39;./zm-blog.html&#39;,\n  controller: &#39;ZMBlogController&#39;\n};\n\nangular\n  .module(&#39;app.components&#39;)\n  .component(&#39;zmBlog&#39;, zmBlog);\n</code></pre>\n<h4 id=\"zm-blog-service-js\">zm-blog.service.js</h4>\n<p><code>GET</code> the data using an <code>http</code> request and return formatted data</p>\n<pre><code class=\"lang-javascript\">function ZMBlogService($http, $sce, $filter) {\n  var service = {\n    getPosts: getPosts\n  };\n\n  return service;\n\n  function getPosts() {\n    return $http({\n      method: &#39;GET&#39;,\n      url: &#39;./dist/data/posts.json&#39;,\n      cache: false\n    })\n    .then(function(response) {\n      for (let key in response.data) {\n        if(response.data) {\n          response.data[key].body = $sce.trustAsHtml(response.data[key].body); // sanitize html\n        }\n      }\n      return response.data;\n    })\n    .catch(function(error) {\n      console.error(error);\n    });\n  }\n}\n\nangular\n  .module(&#39;app.components&#39;)\n  .factory(&#39;ZMBlogService&#39;, ZMBlogService);\n</code></pre>\n<h4 id=\"zm-blog-controller-js\">zm-blog.controller.js</h4>\n<p>Expose the data to the template</p>\n<pre><code class=\"lang-javascript\">function ZMBlogController(ZMBlogService) {\n  let ctrl = this;\n\n  ZMBlogService.getPosts()\n    .then(function(response) {\n      ctrl.posts = response;\n    })\n    .catch(function(error) {\n      console.error(error);\n    });\n}\n\nangular\n  .module(&#39;app.components&#39;)\n  .controller(&#39;ZMBlogController&#39;, ZMBlogController);\n</code></pre>\n<h4 id=\"zm-blog-html\">zm-blog.html</h4>\n<p>Using an HTML template, render the JSON data exposed by the controller</p>\n<pre><code class=\"lang-html\">&lt;h1&gt;Blog&lt;/h1&gt;\n\n&lt;div ng-repeat=&quot;post in $ctrl.posts&quot;&gt;\n  &lt;a ui-sref=&quot;post({ id: post.url })&quot;&gt;{{ post.title }}&lt;/a&gt;\n  &lt;small&gt;{{ post.updatedAt | date }}&lt;/small&gt;\n  &lt;p ng-bind=&quot;post.excerpt&quot;&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<hr>\n<h2 id=\"the-output\">The output</h2>\n<p>I can now use <code>&lt;zm-blog&gt;&lt;/zm-blog&gt;</code> anywhere in my application and Angular will display a list of my blog posts, now rendered in HTML.</p>\n","updatedAt":"2017-02-11T05:08:03.000Z"},"10-02-2017-quick-guide-to-gulp":{"date":"10 February 2017","title":"Quick guide to Gulp","excerpt":"I'll build a task that compiles our Sass styles into CSS. As the Sass files are being compiled, we can manipulate the contents of the files in multiple ways depending on what we need.","tags":["JavaScript","Gulp"],"body":"<p>I&#39;ll build a task that compiles our Sass styles into CSS. As the Sass files are being compiled, we can manipulate the contents of the files in multiple ways depending on what we need.</p>\n<hr>\n<p>Below is a link to a sample Gulpfile. This is can be a great starting point to build out your own tasks.</p>\n<p><a href=\"https://github.com/1forh/gulpfile-example\">https://github.com/1forh/gulpfile-example</a></p>\n<hr>\n<h2 id=\"get-the-gulp-dependencies\">Get the Gulp dependencies</h2>\n<p>To use Gulp you will need a few things:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\">Node.js</a> - v4.4.7+</li>\n<li><a href=\"https://github.com/gulpjs/gulp-cli\">gulp-cli</a> - Allows you to run Gulp tasks using the command line<ul>\n<li><code>npm install --global gulp-cli</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"get-the-gulpfile-dependencies\">Get the Gulpfile dependencies</h2>\n<p>To actually use Gulp in our <code>gulpfile.js</code>, we need to install the dependency. The same is true with any other plugins we want to use.</p>\n<pre><code>npm install gulp gulp-sass --save-dev\n</code></pre><p><strong>Note:</strong> The <code>--save-dev</code> flag will save the dependencies to your <code>package.json</code> file.</p>\n<hr>\n<h2 id=\"the-task\">The task</h2>\n<p>First import the plugins installed earlier and then build out the task. </p>\n<pre><code class=\"lang-javascript\">import gulp from &#39;gulp&#39;;\nimport sass from &#39;gulp-sass&#39;;\n\ngulp.task(&#39;styles&#39;, () =&gt; {\n    return gulp.src(&#39;./src/**/*.scss&#39;)\n        .pipe(sass().on(&#39;error&#39;, sass.logError))\n        .pipe(gulp.dest(&#39;./dist&#39;));\n});\n</code></pre>\n<h2 id=\"expanding-on-the-gulpfile\">Expanding on the Gulpfile</h2>\n<p>Check out other plugins at <a href=\"http://gulpjs.com/plugins/\">Gulp&#39;s website</a> to see what you can do with Gulp.</p>\n","updatedAt":"2017-02-11T05:32:19.000Z"}}